# amcl:
#   ros__parameters:
#     alpha1: 0.2
#     alpha2: 0.2
#     alpha3: 0.2
#     alpha4: 0.2
#     alpha5: 0.2
#     base_frame_id: "rover/base_footprint"
#     beam_skip_distance: 0.5
#     beam_skip_error_threshold: 0.9
#     beam_skip_threshold: 0.3
#     do_beamskip: false
#     global_frame_id: "rover/map"
#     lambda_short: 0.1
#     laser_likelihood_max_dist: 2.0
#     laser_max_range: 100.0
#     laser_min_range: -1.0
#     laser_model_type: "likelihood_field"
#     max_beams: 60
#     max_particles: 2000
#     min_particles: 500
#     odom_frame_id: "rover/odom"
#     pf_err: 0.05
#     pf_z: 0.99
#     recovery_alpha_fast: 0.0
#     recovery_alpha_slow: 0.0
#     resample_interval: 1
#     robot_model_type: "nav2_amcl::DifferentialMotionModel"
#     save_pose_rate: 0.5
#     sigma_hit: 0.2
#     tf_broadcast: true
#     transform_tolerance: 1.0
#     update_min_a: 0.2
#     update_min_d: 0.25
#     z_hit: 0.5
#     z_max: 0.05
#     z_rand: 0.5
#     z_short: 0.05
#     scan_topic: scan

# bt_navigator:
#   ros__parameters:
#     global_frame: "rover/map"
#     robot_base_frame: rover/base_footprint
#     odom_topic: /rover/odom
#     bt_loop_duration: 10
#     default_server_timeout: 20
#     wait_for_service_timeout: 1000
#     action_server_result_timeout: 900.0
#     navigators: ["navigate_to_pose", "navigate_through_poses"]
#     navigate_to_pose:
#       plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
#     navigate_through_poses:
#       plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
#     # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
#     # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
#     # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
#     error_code_names:
#       - compute_path_error_code
#       - follow_path_error_code

controller_server:
  ros__parameters:
    controller_frequency: 20.0
    costmap_update_timeout: 0.30
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"]
    # controller_plugin_types: ["teb_local_planner::TebLocalPlannerROS"]
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false
    
    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    
    # DWB Controller Parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      
      # Velocity limits
      min_vel_x: -5.0
      min_vel_y: 0.0
      max_vel_x: 5.0
      max_vel_y: 0.0
      max_vel_theta: 2.0
      min_speed_xy: -5.0
      max_speed_xy: 5.0
      min_speed_theta: -2.0
      
      # Acceleration limits
      acc_lim_x: 3.0
      acc_lim_y: 0.0
      acc_lim_theta: 3.0
      decel_lim_x: -3.0
      decel_lim_y: 0.0
      decel_lim_theta: -3.0
      
      # DWA specific parameters
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 3.0
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      limit_vel_cmd_in_traj: False
      stateful: True
      
      # Critic scoring parameters
      critics: ["RotateToGoal", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 2.0
      # GoalAlign.scale: 24.0
      # GoalAlign.forward_point_distance: 2.0
      # PathDist.scale: 32.0
      GoalDist.scale: 24.0
      # RotateToGoal.scale: 32.0
      # RotateToGoal.slowing_factor: 5.0
      # RotateToGoal.lookahead_time: -1.0
      BaseObstacle.scale: 50.0
      BaseObstacle.sum_scores: true


    # https://answers.ros.org/question/392441/
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: 0.0
    #   min_vel_y: 0.0
    #   max_vel_x: 1.0 # 0.26
    #   max_vel_y: 0.0
    #   max_vel_theta: 5.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 5.0 # 0.26
    #   min_speed_theta: 0.0
    #   # Add high threshold velocity for turtlebot 3 issue.
    #   # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
    #   acc_lim_x: 2.5
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 3.2
    #   decel_lim_x: -2.5
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -3.2
    #   vx_samples: 20
    #   vy_samples: 5
    #   vtheta_samples: 20
    #   sim_time: 5.0
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 1.0 # 0.25
    #   trans_stopped_velocity: 0.25
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   critics: ["Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"] # ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   BaseObstacle.scale: 50.0
    #   PathAlign.scale: 32.0
    #   PathAlign.forward_point_distance: 0.1
    #   GoalAlign.scale: 24.0
    #   GoalAlign.forward_point_distance: 0.1
    #   PathDist.scale: 32.0
    #   GoalDist.scale: 24.0
    #   RotateToGoal.scale: 32.0
    #   RotateToGoal.slowing_factor: 5.0
    #   RotateToGoal.lookahead_time: -1.0




    # TEB parameters
    # http://wiki.ros.org/teb_local_planner
    # FollowPath:
    #   plugin: "teb_local_planner::TebLocalPlannerROS"
    #   odom_topic: odom
    #   map_frame: map

    #   # footprint_model.type: circular
    #   # footprint_model.radius: 2.0
    #   footprint_model.type: polygon
    #   footprint_model.vertices: "[ [1.54, 0.405], [1.54, -0.405], [-0.2, -0.405], [-0.2, 0.405] ]"

    #   min_turning_radius: 2.0
    #   wheelbase: 1.35
    #   cmd_angle_instead_rotvel: true # INVESTIGATE MORE!
    #   min_obstacle_dist: 1.0
    #   inflation_dist: 1.0
    #   costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
    #   costmap_converter_spin_thread: True
    #   costmap_converter_rate: 15
    #   enable_homotopy_class_planning: True
    #   enable_multithreading: True
    #   optimization_verbose: False
    #   teb_autoresize: True
    #   min_samples: 3
    #   max_samples: 20
    #   max_global_plan_lookahead_dist: 5.0
    #   visualize_hc_graph: True
    #   max_vel_x: 0.75
    #   max_vel_x_backwards: 0.2
    #   max_vel_y: 0.0 # should be zero for non-holonomic robots
    #   acc_lim_y: 0.05
    #   max_vel_theta: 1.0
    #   acc_lim_x: 0.5
    #   acc_lim_theta: 0.1
    #   yaw_goal_tolerance: 0.2
    #   xy_goal_tolerance: 0.1
    #   include_costmap_obstacles: True
    #   publish_feedback: True # Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging)


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 5.0
      global_frame: rover/odom
      robot_base_frame: rover/base_footprint
      use_sim_time: True
      rolling_window: true
      width: 15
      height: 15
      resolution: 0.05
      # footprint: "[ [0.4, 0.4], [0.4, -0.4], [-0.4, -0.4], [-0.4, 0.4] ]"
      plugins: ["obstacle_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: lidar camera
        lidar:
          topic: /lidar
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 4.0
          obstacle_min_range: 0.0
        camera:
          topic: /camera_points
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 4.0
          obstacle_min_range: 0.0
          
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.8

# global_costmap:
#   global_costmap:
#     ros__parameters:
#       update_frequency: 1.0
#       publish_frequency: 1.0
#       global_frame: rover/odom
#       robot_base_frame: rover/base_footprint
#       use_sim_time: True
#       footprint: "[ [0.4, 0.4], [0.4, -0.4], [-0.4, -0.4], [-0.4, 0.4] ]"
#       resolution: 0.05
#       track_unknown_space: true
#       plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      
#       static_layer:
#         plugin: "nav2_costmap_2d::StaticLayer"
#         map_subscribe_transient_local: True
        
#       obstacle_layer:
#         plugin: "nav2_costmap_2d::ObstacleLayer"
#         enabled: True
#         observation_sources: lidar
#         lidar:
#           topic: /lidar
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "PointCloud2"
#           raytrace_max_range: 5.0
#           raytrace_min_range: 0.0
#           obstacle_max_range: 4.0
#           obstacle_min_range: 0.0
          
#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         cost_scaling_factor: 3.0
#         inflation_radius: 1.0

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner::NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

    
behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    # global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    # global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    wait:
      plugin: "nav2_behaviors::Wait"
    local_frame: rover/odom
    global_frame: rover/map
    robot_base_frame: rover/base_footprint
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2
    use_sim_time: true

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 1.0]
    min_velocity: [-0.5, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "rover/odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    base_frame_id: "rover/base_footprint"
    odom_frame_id: "rover/odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: True
      enabled: True
      
    observation_sources: ["cloud"]
    cloud:
      type: "pointcloud"
      topic: /lidar
      min_height: 0.05
      max_height: 2.0
      enabled: True

